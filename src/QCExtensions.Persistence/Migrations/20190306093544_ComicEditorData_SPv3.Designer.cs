// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QCExtensions.Persistence;

namespace QCExtensions.Persistence.Migrations
{
    [DbContext(typeof(QCExtensionsDbContext))]
    [Migration("20190306093544_ComicEditorData_SPv3")]
    partial class ComicEditorData_SPv3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("QCExtensions.Domain.Entities.Comic", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<bool>("HasNoCast");

                    b.Property<bool>("HasNoLocation");

                    b.Property<bool>("HasNoStoryline");

                    b.Property<bool>("HasNoTagline");

                    b.Property<bool>("HasNoTitle");

                    b.Property<int>("ImageType")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<bool>("IsAccuratePublishDate")
                        .HasColumnName("isAccuratePublishDate");

                    b.Property<bool>("IsGuestComic")
                        .HasColumnName("isGuestComic");

                    b.Property<bool>("IsNonCanon")
                        .HasColumnName("isNonCanon");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnName("publishDate");

                    b.Property<string>("Tagline")
                        .HasColumnName("tagline")
                        .HasMaxLength(255);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("comic");
                });

            modelBuilder.Entity("QCExtensions.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(255);

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnName("shortName")
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("items");
                });

            modelBuilder.Entity("QCExtensions.Domain.Entities.ItemImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<uint>("CRC32CHash");

                    b.Property<byte[]>("Image")
                        .IsRequired();

                    b.Property<int>("ItemId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemImages");
                });

            modelBuilder.Entity("QCExtensions.Domain.Entities.LogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired();

                    b.Property<DateTime>("DateTime");

                    b.Property<Guid>("UserToken");

                    b.HasKey("Id");

                    b.HasIndex("UserToken");

                    b.ToTable("log_entry");
                });

            modelBuilder.Entity("QCExtensions.Domain.Entities.News", b =>
                {
                    b.Property<int>("ComicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("comic");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("isLocked");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnName("lastUpdated");

                    b.Property<string>("NewsText")
                        .IsRequired()
                        .HasColumnName("news");

                    b.Property<double>("UpdateFactor")
                        .HasColumnName("updateFactor");

                    b.HasKey("ComicId");

                    b.ToTable("news");
                });

            modelBuilder.Entity("QCExtensions.Domain.Entities.Occurrence", b =>
                {
                    b.Property<int>("ComicId")
                        .HasColumnName("comic_id");

                    b.Property<int>("ItemId")
                        .HasColumnName("items_id");

                    b.HasKey("ComicId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("occurences");
                });

            modelBuilder.Entity("QCExtensions.Domain.Entities.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("CanAddImageToItem");

                    b.Property<bool>("CanAddItemToComic");

                    b.Property<bool>("CanChangeComicData");

                    b.Property<bool>("CanChangeItemData");

                    b.Property<bool>("CanRemoveImageFromItem");

                    b.Property<bool>("CanRemoveItemFromComic");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("token");
                });

            modelBuilder.Entity("QCExtensions.Domain.Entities.Comic", b =>
                {
                    b.HasOne("QCExtensions.Domain.Entities.News", "News")
                        .WithOne("Comic")
                        .HasForeignKey("QCExtensions.Domain.Entities.Comic", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QCExtensions.Domain.Entities.Item", b =>
                {
                    b.OwnsOne("QCExtensions.Domain.ValueObjects.HexRgbColor", "Color", b1 =>
                        {
                            b1.Property<int>("ItemId");

                            b1.Property<byte>("Blue");

                            b1.Property<byte>("Green");

                            b1.Property<byte>("Red");

                            b1.HasKey("ItemId");

                            b1.ToTable("items");

                            b1.HasOne("QCExtensions.Domain.Entities.Item")
                                .WithOne("Color")
                                .HasForeignKey("QCExtensions.Domain.ValueObjects.HexRgbColor", "ItemId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("QCExtensions.Domain.Entities.ItemImage", b =>
                {
                    b.HasOne("QCExtensions.Domain.Entities.Item", "Item")
                        .WithMany("Images")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QCExtensions.Domain.Entities.LogEntry", b =>
                {
                    b.HasOne("QCExtensions.Domain.Entities.Token", "Token")
                        .WithMany("LogEntries")
                        .HasForeignKey("UserToken")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QCExtensions.Domain.Entities.Occurrence", b =>
                {
                    b.HasOne("QCExtensions.Domain.Entities.Comic", "Comic")
                        .WithMany("Occurrences")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QCExtensions.Domain.Entities.Item", "Item")
                        .WithMany("Occurrences")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
